{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 int * openFileIntoArray(char * file_name);\
void print2DIntArray(int * array, int width, int height);\
int * cloneIntArray(int * array);\
ArrayList * findAllPieces(int * input_array, int rows, int row_length);\
int foundAllPieces(int * array, int width, int height);\
void examineNeighbors(int * array, int width, int height, PieceNode * n);\
int * getInfo(PieceNode * n, int cur_top, int cur_bottom, int cur_left, int cur_right);\
void makePieceArray(int * array, PieceNode * n, int left_offset, int top_offset, int width);\
int * findAndRemoveLargestArray(ArrayList * list);\
int numberOfTiles(int * n, int width, int height);\
void debugPieces(int * biggest, ArrayList * pieces);\
SolutionList * findSolutions(int * biggest, ArrayList * pieces);\
int isAFit(int * biggest, int * smaller, int x, int y);\
void negateValues(int * biggest, int * smaller, int x, int y);\
void makeValuesPositive(int * biggest);\
ArrayList * readSolutions(SolutionList * solutions, ArrayList * list, int num);\
int getNumberOfPieces(ArrayList * pieces);\
void printSolutionFromArrayList(ArrayList * soln, int num);\
void debugSolutionList(ArrayList * temporary, int p);\
ArrayList * parseSolutionsList(SolutionList * solutions, int p);\
ArrayList * solveNoRotations(char * file_name);\
SolutionList * findSolutionsRotations(int * biggest, RotationList * pieces);\
int * rotateLeft(int * array);\
int * flipHorizontal(int * array);\
RotationList * createRotationList(ArrayList * list);\
ArrayList * solveWithRotations(char * file_name, int rotation);\
void removeIsometricRotations(RotationList * t);\
void debugRotationsList(RotationList * r);\
SolutionList * findPartialSolutionRotations(int * biggest, int * cur_array, RotationList * pieces, SolutionList * most_recent, int ident, int rotation);\
void removeAllSolutionIsometries(ArrayList * list, int * biggest, int num, RotationList * pieces);\
int * initializeIntArray(ArrayList * list, int * array, int width, int height, int num, RotationList * pieces);\
int areIsomorphic(int * array, int * temp, int num);\
int areSame(int * array, int * temp, int num);\
void removeNullSolutions(ArrayList * list);\
ArrayList * finalize(ArrayList * readout, RotationList * r, int * biggest, int num);\
void write2DIntArrayToFile(FILE * f, int * array);\
int getPieceSize(int * array);\
void writeNullSolFile();}