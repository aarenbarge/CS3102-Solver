{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww18720\viewh13380\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 README.txt\
Aaren Barge - jab9rm@virginia.edu\
\
//\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97//\
Overview and Folder Contents\
//\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97//\
\
This folder contains all of the files associated with my CS3102 Theory of Computation course at UVA.  This program takes in a well-formed input describing a puzzle (in terms of a target configuration and available pieces) and displays images of the non isomorphic solutions (up to a maximum number).  \
\
A detailed description of exactly how this program works, the data structures, and algorithms I wrote to accomplish this task, and directions on how to run this program are located in \'93
\b CS3102_Documentation.pdf
\b0 \'94.  \
\

\b Solver.c
\b0  is the source code for the input parsing, solving, and isometry detecting routines, and is compilable with the Makefile.\
\

\b drawbox.py
\b0  is a python script which draws the solutions so that they can be viewed visually.\
\

\b solve.sh
\b0  is a shell script that automates the process of running the ./a.out executable generated from the Solver.c source, and piping that output into drawbox.py.  \
\

\b c_output.txt
\b0  is a file that is used by the program and is overwritten every time Solver.c is executed, don\'92t store information here.\
\

\b test_files
\b0  contains sample input files that I used for debugging.  Use these or others of the same form to try the algorithm out\
\
Finally, 
\b Sample Results
\b0  contains test input files, output files, and screenshots of solutions for multiple puzzles I tested my project on.  \
\
//\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97//\
Running the Program\
//\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97//\
\
To run the whole program, navigate to the proper directory and call:\
\
	./solve.sh __input_file__\
\
This runs the default version of the program which does not allow for rotation of the pieces, and will display a maximum of 5 solutions.  To allow rotations and reflections call:\
\
	./solve.sh __input_file__  1\
\
To adjust the maximum number of solutions to display (up to 20), you must also specify whether rotations are allowed or not:\
\
	./solve.sh __input_file__  1    15\
\
Will allow rotations and reflections and display a maximum of 15 solutions,\
\
	./solve.sh __input_file  0    100 \
\
Will prohibit rotations and display a maximum of 20 solutions.\
\
You can also compile and run the solving routine with:\
\
	./a.out __input_file__  \'97rotate?\'97\
\
Or You can display the solutions (as long as the file is well formed) using the python routine:\
\
	python drawbox.py __input_file__  \'97max\'97\
\
}